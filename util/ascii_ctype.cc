// Copyright 2011 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "cpp-base/util/ascii_ctype.h"

namespace cpp_base {

// # Table generated by this Python code (bit 0x02 is currently unused):
// def Hex2(n):
//   return '0x' + hex(n/16)[2:] + hex(n%16)[2:]
// def IsPunct(ch):
//   return (ord(ch) >= 32 and ord(ch) < 127 and
//           not ch.isspace() and not ch.isalnum())
// def IsBlank(ch):
//   return ch in ' \t'
// def IsCntrl(ch):
//   return ord(ch) < 32 or ord(ch) == 127
// def IsXDigit(ch):
//   return ch.isdigit() or ch.lower() in 'abcdef'
// for i in range(128):
//   ch = chr(i)
//   mask = ((ch.isalpha() and 0x01 or 0) |
//           (ch.isalnum() and 0x04 or 0) |
//           (ch.isspace() and 0x08 or 0) |
//           (IsPunct(ch) and 0x10 or 0) |
//           (IsBlank(ch) and 0x20 or 0) |
//           (IsCntrl(ch) and 0x40 or 0) |
//           (IsXDigit(ch) and 0x80 or 0))
//   print Hex2(mask) + ',',
//   if i % 16 == 7:
//     print ' //', Hex2(i & 0x78)
//   elif i % 16 == 15:
//     print
const unsigned char kAsciiPropertyBits[256] = {
  0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  // 0x00
  0x40, 0x68, 0x48, 0x48, 0x48, 0x48, 0x40, 0x40,
  0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  // 0x10
  0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
  0x28, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,  // 0x20
  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
  0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84,  // 0x30
  0x84, 0x84, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x05,  // 0x40
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,  // 0x50
  0x05, 0x05, 0x05, 0x10, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x05,  // 0x60
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,  // 0x70
  0x05, 0x05, 0x05, 0x10, 0x10, 0x10, 0x10, 0x40,
};

// (char)-casts for values >=128 are to shut up the compiler about the
// 'narrowing' warning.
const char kAsciiToLower[256] = {
  00,   1,   2,   3,   4,   5,   6,   7,   8,   9,
  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,
  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,
  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,
  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
  60,  61,  62,  63,  64,  'a', 'b', 'c', 'd', 'e',
  'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
  'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
  'z', 91,  92,  93,  94,  95,  96,  97,  98,  99,
  100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
  110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
  120, 121, 122, 123, 124, 125, 126, 127,
  (char) 128, (char) 129, (char) 130, (char) 131, (char) 132, (char) 133,   // NOLINT
  (char) 134, (char) 135, (char) 136, (char) 137, (char) 138, (char) 139,   // NOLINT
  (char) 140, (char) 141, (char) 142, (char) 143, (char) 144, (char) 145,   // NOLINT
  (char) 146, (char) 147, (char) 148, (char) 149, (char) 150, (char) 151,   // NOLINT
  (char) 152, (char) 153, (char) 154, (char) 155, (char) 156, (char) 157,   // NOLINT
  (char) 158, (char) 159, (char) 160, (char) 161, (char) 162, (char) 163,   // NOLINT
  (char) 164, (char) 165, (char) 166, (char) 167, (char) 168, (char) 169,   // NOLINT
  (char) 170, (char) 171, (char) 172, (char) 173, (char) 174, (char) 175,   // NOLINT
  (char) 176, (char) 177, (char) 178, (char) 179, (char) 180, (char) 181,   // NOLINT
  (char) 182, (char) 183, (char) 184, (char) 185, (char) 186, (char) 187,   // NOLINT
  (char) 188, (char) 189, (char) 190, (char) 191, (char) 192, (char) 193,   // NOLINT
  (char) 194, (char) 195, (char) 196, (char) 197, (char) 198, (char) 199,   // NOLINT
  (char) 200, (char) 201, (char) 202, (char) 203, (char) 204, (char) 205,   // NOLINT
  (char) 206, (char) 207, (char) 208, (char) 209, (char) 210, (char) 211,   // NOLINT
  (char) 212, (char) 213, (char) 214, (char) 215, (char) 216, (char) 217,   // NOLINT
  (char) 218, (char) 219, (char) 220, (char) 221, (char) 222, (char) 223,   // NOLINT
  (char) 224, (char) 225, (char) 226, (char) 227, (char) 228, (char) 229,   // NOLINT
  (char) 230, (char) 231, (char) 232, (char) 233, (char) 234, (char) 235,   // NOLINT
  (char) 236, (char) 237, (char) 238, (char) 239, (char) 240, (char) 241,   // NOLINT
  (char) 242, (char) 243, (char) 244, (char) 245, (char) 246, (char) 247,   // NOLINT
  (char) 248, (char) 249, (char) 250, (char) 251, (char) 252, (char) 253,   // NOLINT
  (char) 254, (char) 255                                                    // NOLINT
};

// (char)-casts for values >=128 are to shut up the compiler about the
// 'narrowing' warning.
const char kAsciiToUpper[256] = {
  00,   1,   2,   3,   4,   5,   6,   7,   8,   9,
  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,
  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,
  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,
  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,
  90,  91,  92,  93,  94,  95,  96, 'A', 'B', 'C',
  'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
  'X', 'Y', 'Z', 123, 124, 125, 126, 127,
  (char) 128, (char) 129, (char) 130, (char) 131, (char) 132, (char) 133,   // NOLINT
  (char) 134, (char) 135, (char) 136, (char) 137, (char) 138, (char) 139,   // NOLINT
  (char) 140, (char) 141, (char) 142, (char) 143, (char) 144, (char) 145,   // NOLINT
  (char) 146, (char) 147, (char) 148, (char) 149, (char) 150, (char) 151,   // NOLINT
  (char) 152, (char) 153, (char) 154, (char) 155, (char) 156, (char) 157,   // NOLINT
  (char) 158, (char) 159, (char) 160, (char) 161, (char) 162, (char) 163,   // NOLINT
  (char) 164, (char) 165, (char) 166, (char) 167, (char) 168, (char) 169,   // NOLINT
  (char) 170, (char) 171, (char) 172, (char) 173, (char) 174, (char) 175,   // NOLINT
  (char) 176, (char) 177, (char) 178, (char) 179, (char) 180, (char) 181,   // NOLINT
  (char) 182, (char) 183, (char) 184, (char) 185, (char) 186, (char) 187,   // NOLINT
  (char) 188, (char) 189, (char) 190, (char) 191, (char) 192, (char) 193,   // NOLINT
  (char) 194, (char) 195, (char) 196, (char) 197, (char) 198, (char) 199,   // NOLINT
  (char) 200, (char) 201, (char) 202, (char) 203, (char) 204, (char) 205,   // NOLINT
  (char) 206, (char) 207, (char) 208, (char) 209, (char) 210, (char) 211,   // NOLINT
  (char) 212, (char) 213, (char) 214, (char) 215, (char) 216, (char) 217,   // NOLINT
  (char) 218, (char) 219, (char) 220, (char) 221, (char) 222, (char) 223,   // NOLINT
  (char) 224, (char) 225, (char) 226, (char) 227, (char) 228, (char) 229,   // NOLINT
  (char) 230, (char) 231, (char) 232, (char) 233, (char) 234, (char) 235,   // NOLINT
  (char) 236, (char) 237, (char) 238, (char) 239, (char) 240, (char) 241,   // NOLINT
  (char) 242, (char) 243, (char) 244, (char) 245, (char) 246, (char) 247,   // NOLINT
  (char) 248, (char) 249, (char) 250, (char) 251, (char) 252, (char) 253,   // NOLINT
  (char) 254, (char) 255                                                    // NOLINT
};

}  // namespace cpp_base
